<?xml version="1.0" encoding="utf-8" ?>
<!--
OpenRemote, the Home of the Digital Home.
Copyright 2008-2012, OpenRemote Inc.

See the contributors.txt file in the distribution for a
full listing of individual contributors.

This is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 3.0 of
the License, or (at your option) any later version.

This software is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

You should have received a copy of the GNU General Public
License along with this software; if not, write to the Free
Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->
<!--
 |  Build file for OpenRemote UserAccountService
 |
 |  Author: Marcus Redeker
 +-->
<project name="UserAccountService" default="javac" basedir=".">

	<property file="build.local.properties"/>
	<property file="build.properties"/>

	<!-- Some base dir used -->
	<property name="project.name" value="uas" />
	<property name="lib.dir" value="lib" />
	<property name="web-inf.dir" value="war/WEB-INF" />
	<property name="src.dir" value="src"/>
	<property name="test.dir" value="test"/>
	<property name="config.dir" value="config"/>
	<property name="build.config.dir" value="build_config"/>
	<property name="output.dir" value="output"/>

	<!-- dirs for test build and output -->
	<property name="test.build.dir" value="test_build"/>
	<property name="test.build.classes.dir" value="${test.build.dir}/classes"/>
	<property name="test.output.dir" value="${test.build.dir}/test-output"/>
	<property name="test.report.dir" value="${test.build.dir}/test-report"/>

	<!-- Some variables for HSQLDB Engine Server Mode, NOT In-Memory Mode -->
	<property name="hjar" value="${lib.dir}/test/hsqldb/hsqldb.jar" />
	<property name="hclass" value="org.hsqldb.Server" />
	<property name="hfile" value="-database.0 hsqldb/modeler" />
	<property name="halias" value="modeler" />
	<property name="hport" value="9001" />

	<!-- javadoc -->
	<property name="javadoc.dir" value="doc" />
	<property name="javadoc.locale" value="en_US" />

    <!--
     | Additional classpath elements for running the test suites.
     +-->
    <path id = "test.path.id">
      <path location = "${classes.dir}"/>
      <path location = "${test.dir}"/>
      <fileset dir = "${lib.dir}/test" includes = "**/*.jar"/>
      <path location = "${config.dir}"/>

      <path refid = "project.class.path"/>
    </path>

	<!-- ==================================================================== -->
	<!-- project class path                                                   -->
	<!-- ==================================================================== -->
	<path id="project.class.path">
		<pathelement location="${web-inf.dir}/classes"/>
		<pathelement location="${test.build.classes.dir}"/>
		<!-- Add any additional non-server libs (such as JUnit, TestNG) -->
		<fileset dir="${lib.dir}" includes="core/**/*.jar"/>
		<fileset dir="${lib.dir}" includes="test/**/*.jar"/>
		<fileset dir="${lib.dir}" includes="compile/**/*.jar"/>
	</path>

	<!-- ==================================================================== -->
	<!-- Clean previous build                                                 -->
	<!-- ==================================================================== -->
	<target name="clean" description="Cleans this project">
		<delete dir="${web-inf.dir}/classes" failonerror="false" />
		<delete dir="war/modeler" failonerror="false" />
		<delete dir="${web-inf.dir}/lib" failonerror="false" />
		<delete dir="${output.dir}"/>
		<delete dir="${test.build.dir}"/>
	</target>

	<!-- ==================================================================== -->
	<!-- Prepare lib for build                                                -->
	<!-- ==================================================================== -->
	<target name="libs" depends="clean" description="Copy libs to WEB-INF/lib">
		<mkdir dir="${output.dir}" />
		<mkdir dir="${web-inf.dir}/lib" />
		<copy todir="${web-inf.dir}/lib" flatten="true">
			<fileset dir="${lib.dir}/core" includes="**/*.jar"/>
		</copy>
		<!-- Add any additional server libs that need to be copied -->
	</target>

	<!-- ==================================================================== -->
	<!-- Run javac to compile class                                           -->
	<!-- ==================================================================== -->
	<target name="javac" depends="libs" description="Compile java source">
		<echo message="--------------------------------------------------------------------" />
		<echo message=" Compiling Java classes..." />
		<echo message="--------------------------------------------------------------------" />
		<echo message="" />
		<mkdir dir="${web-inf.dir}/classes" />
		<javac srcdir="${src.dir}" includes="**" encoding="utf-8" destdir="${web-inf.dir}/classes" source="1.5" target="1.5" nowarn="true" debug="true" debuglevel="lines,vars,source">
			<classpath refid="project.class.path"/>
		</javac>
		<copy todir="${web-inf.dir}/classes">
			<fileset dir="${src.dir}" excludes="**/*.java"/>
			<fileset dir="${config.dir}" includes="**/**"/>
		</copy>
	</target>

	<!-- ==================================================================== -->
	<!-- Pack war                                                             -->
	<!-- ==================================================================== -->
	<target name="war" depends="javac" description="Create a war file">
		<echo message="--------------------------------------------------------------------" />
		<echo message=" Packing war..." />
		<echo message="--------------------------------------------------------------------" />
		<echo message="" />
		<zip destfile="${output.dir}/${project.name}.war" basedir="war"/>
	</target>

    <!-- ==================================================================== -->
    <!-- Pack test specific war                                               -->
    <!-- ==================================================================== -->
    <!-- Mail sender mock is located in the test classes (so it does not get included in production code).
         Test classes must thus be compiled so we can include that class in the war.
         This is why this target depends on compile-test (which in turns will depend on javac, compiling main code). -->
    <target name="test-war" depends="compile-test" description="Create a war file">
        <echo message="--------------------------------------------------------------------" />
        <echo message=" Packing test war..." />
        <echo message="--------------------------------------------------------------------" />
        <echo message="" />

        <!-- Replace some configuration files with ones specific for testing -->
        <copy file="${test.dir}/datasource-test.xml" tofile="${web-inf.dir}/classes/datasource.xml" overwrite="true"/>
        <copy file="${test.dir}/applicationContext-mail-test.xml" tofile="${web-inf.dir}/classes/applicationContext-mail.xml" overwrite="true"/>

        <!-- Include required mail sender mock -->
        <copy file="${test.build.classes.dir}/org/openremote/JavaMailSenderMock.class" todir="${web-inf.dir}/classes/org/openremote"/>

        <zip destfile="${output.dir}/${project.name}.war" basedir="war"/>
    </target>

	<!-- ==================================================================== -->
	<!-- Deploy war into web server                                           -->
	<!-- ==================================================================== -->
	<target name="deploy" depends="war" description="--> deploy the project">
		<echo message="--------------------------------------------------------------------" />
		<echo message=" Deploying project..." />
		<echo message="--------------------------------------------------------------------" />
		<echo message="" />
		<delete file="${deploy.dir}/${project.name}.war"/>
		<delete dir="${deploy.dir}/${project.name}"/>
		<copy todir="${deploy.dir}" file="${output.dir}/${project.name}.war"/>
	</target>


	<!-- ==================================================================== -->
	<!-- Compile test class into test_build/classes                           -->
	<!-- ==================================================================== -->
	<target name="compile-test" depends="javac" description="--> compile the test cases.">
		<echo message="--------------------------------------------------------------------" />
		<echo message=" Compiling test..." />
		<echo message="--------------------------------------------------------------------" />
		<echo message="" />
		
		<mkdir dir="${test.build.classes.dir}"/>
		
		<copy todir="${test.build.classes.dir}">
			<fileset dir="${test.dir}">
				<include name="**/*.xml" />
			</fileset>
		</copy>
		<javac srcdir="${test.dir}" destdir="${test.build.classes.dir}" classpathref="project.class.path" />
	</target>

	<!-- ==================================================================== -->
	<!-- Javadoc                                                              -->
	<!-- ==================================================================== -->
	<target name="javadoc" description="Generate API docs for the DocCheck source">
		<echo message="--------------------------------------------------------------------" />
		<echo message=" Generating javadoc..." />
		<echo message="--------------------------------------------------------------------" />
		<echo message="" />
		<mkdir dir="${javadoc.dir}" />
		<javadoc
	              locale           ="${javadoc.locale}"
	              defaultexcludes  = "yes"
	              use              = "yes"
	              header           = "OpenRemote UserAccount REST service API"
	              doctitle         = "OpenRemote UserAccount REST service API"
	              nodeprecatedlist = "yes"
			      classpathref     = "project.class.path" 
	              sourcepath       = "./${src.dir}"
	              destdir          = "./${javadoc.dir}"
	              additionalparam  = "-breakiterator"
	          />
	</target>
	
    <!--
      | RUN-TEST:
      |
      | Run all tests.
      +-->
    <target name = "run-test" depends = "compile-test, test-war" description = "--> run all test cases.">
		<delete dir="hsqldb" failonerror="no"/>
		
        <antcall target="dbup"/>

		<!-- Give a bit of time for the database to startup.
		     TODO: Better solution would be to check DB is up. -->
		<sleep seconds="5"/>

        <sql driver="org.hsqldb.jdbcDriver"
			classpath="${hjar}"
			url="jdbc:hsqldb:hsql://localhost/modeler"
			userid="sa"
			password=""
			src="${test.dir}/dbsetup.sql"/>

        <parallel>

            <!--
             | Start web server hosting services we depend on (e.g. UAS)
             +-->
             <echo message = "**** STARTING TEST CONTAINER ON PORT 8090 ****"/>

	         <java classname = "org.openremote.useraccount.jetty.JettyStart"
	               classpathref = "test.path.id"
	               fork = "true">
	         </java>

             <sequential>
	 
                 <!--
                  |   Wait for the test container to be available
                  +-->
                 <waitfor>
                   <socket server = "127.0.0.1" port = "8090" />
                 </waitfor>
                     
                 <echo message = "**** TEST CONTAINER STARTED ****"/>
                     
		         <!--
		          |  Run the unit tests...
		         +-->
		        <antcall target = "-junit"/>
                     
                 <!--
                  |  Stop the test container
                  +-->
                     
                 <echo message = "**** STOPPING TEST CONTAINER ****"/>
				 
		         <java classname = "org.openremote.useraccount.jetty.JettyStop" classpathref = "test.path.id" />
                     
             </sequential>
        </parallel>

      <antcall  target = "-generate-junit-report"/>
	  
      <antcall target="dbdown"/>

    </target>
	
    <!--
     | Deletes previously generated test reports.
     +-->
    <target name = "-clean-testreport">

      <delete includeemptydirs = "true" dir = "${test.report.dir}" />
      <mkdir dir = "${test.report.dir}" />

    </target>
	
    <!--
     | Translates the XML to HTML report - separate task because calling from within
     | parallel execution block was causing deadlocks.
     +-->
    <target  name = "-generate-junit-report">

      <!-- JUnit XML to HTML report -->

      <junitreport todir = "${test.report.dir}">
        <fileset dir = "${test.report.dir}">
          <include name = "TEST-*.xml" />
        </fileset>

        <report format = "frames" todir = "${test.report.dir}" />
      </junitreport>

    </target>
	
    <!--
     | Junit test task... runs JUnit for one or batch of tests, depending on junit.single.test
     | property. Passes necessary system properties to the JVM hosting JUnit tests (forked as
     | separate JVM process from the Ant Build JVM).
     |
     +-->
    <target name = "-junit" depends = "-clean-testreport">

      <echo message = "--------------------------------------------------------------------"/>
      <echo message = " Running tests..."/>
      <echo message = "--------------------------------------------------------------------"/>
      <echo message = ""/>

      <echo message = "RESOLVED COMPILED UNIT TEST PATH TO : ${test.build.classes.dir}"/>

      <!-- Fork unit test JVM from from Ant's JVM (but run all tests in same unit test JVM) -->
      <junit dir = "${test.build.classes.dir}"
             printsummary = "true"
             fork = "yes"
             forkmode = "once"
             haltonerror = "no"
             filtertrace = "on"
             maxmemory = "500m"
             includeantruntime = "true"
             showoutput = "false"
             logfailedtests = "true">

        <sysproperty key = "ant.home" value = "${ant.home}" />

        <!-- classpath that includes compiled tests -->
        <classpath refid = "project.class.path"/>


        <!--
         | Let the unit test JVM know the 'resource.path' configuration property value of the
         | test container's deployed controller.war
         +-->
        <sysproperty key = "testcontainer.vm.resource.path" value = "${testcontainer.vm.resource.path}"/>


        <!-- Pass a system property that gives tests that need access to the compiled
             test class directory (which contains fixture files) as an absolute file path   -->
        <sysproperty key = "classes.dir" file = "${test.build.classes.dir}"/>


        <!-- XML output for junit (html) report generator                                 -->
        <formatter type = "xml" />


        <!-- If no junit.single.test has been specified, run all tests via AllTests class -->
        <batchtest todir = "${test.report.dir}" unless = "junit.single.test">
          <fileset dir = "${test.build.classes.dir}" includes = "**/*Test.class" />
        </batchtest>


        <!-- IF junit.single.test is present, just run one specified test -->
        <test name = "${test}" todir = "${test.report.dir}" if = "junit.single.test">
          <formatter type = "xml"/>
        </test>

      </junit>

      <fail if="tests.failed" />

    </target>
	
	<!-- ==================================================================== -->
	<!-- HSQLDB script                                                        -->
	<!-- ==================================================================== -->

	<!-- Start up HSQLDB instance in Engine Server Mode -->
	<target name="dbup" description="Start the Hsqldb database server">
		<java fork="true" spawn="true" classname="${hclass}" classpath="${hjar}" 
		        args="${hfile} -dbname.0 ${halias} -port ${hport}" />
	</target>

	<!-- Start up HSQLDB swing manager UI -->
	<target name="dbm" description="Start up HSQLDB swing manager UI">
		<java fork="true" classname="org.hsqldb.util.DatabaseManagerSwing" 
	        classpath="${hjar}"  />
	</target>

	<!-- Shut down HSQLDB -->
	<target name="dbdown" description="Shut down HSQLDB">
		<sql classpath="${hjar}"
	           driver="org.hsqldb.jdbcDriver" 
	           url="jdbc:hsqldb:hsql://localhost:${hport}/${halias}" 
	           userid="sa" password="" 
	           print="yes"
                   onerror="continue">
                   <!-- shutdown command kills our connection, so an error is always reported,
                        ignore error to ensure build does not fail -->
	        SHUTDOWN
	    </sql>
	</target>

</project>
